// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: node/chord.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChordNode_FindSuccessor_FullMethodName   = "/chord.ChordNode/FindSuccessor"
	ChordNode_GetPredecessor_FullMethodName  = "/chord.ChordNode/GetPredecessor"
	ChordNode_Notify_FullMethodName          = "/chord.ChordNode/Notify"
	ChordNode_Put_FullMethodName             = "/chord.ChordNode/Put"
	ChordNode_Get_FullMethodName             = "/chord.ChordNode/Get"
	ChordNode_Join_FullMethodName            = "/chord.ChordNode/Join"
	ChordNode_ReceiveFileInfo_FullMethodName = "/chord.ChordNode/ReceiveFileInfo"
)

// ChordNodeClient is the client API for ChordNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChordNodeClient interface {
	FindSuccessor(ctx context.Context, in *FindSuccessorRequest, opts ...grpc.CallOption) (*FindSuccessorResponse, error)
	GetPredecessor(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NodeInfo, error)
	Notify(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*EmptyResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	ReceiveFileInfo(ctx context.Context, in *FileChunkInfo, opts ...grpc.CallOption) (*FileChunkResponse, error)
}

type chordNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewChordNodeClient(cc grpc.ClientConnInterface) ChordNodeClient {
	return &chordNodeClient{cc}
}

func (c *chordNodeClient) FindSuccessor(ctx context.Context, in *FindSuccessorRequest, opts ...grpc.CallOption) (*FindSuccessorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSuccessorResponse)
	err := c.cc.Invoke(ctx, ChordNode_FindSuccessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) GetPredecessor(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NodeInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NodeInfo)
	err := c.cc.Invoke(ctx, ChordNode_GetPredecessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) Notify(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*EmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, ChordNode_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutResponse)
	err := c.cc.Invoke(ctx, ChordNode_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, ChordNode_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, ChordNode_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordNodeClient) ReceiveFileInfo(ctx context.Context, in *FileChunkInfo, opts ...grpc.CallOption) (*FileChunkResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileChunkResponse)
	err := c.cc.Invoke(ctx, ChordNode_ReceiveFileInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChordNodeServer is the server API for ChordNode service.
// All implementations must embed UnimplementedChordNodeServer
// for forward compatibility.
type ChordNodeServer interface {
	FindSuccessor(context.Context, *FindSuccessorRequest) (*FindSuccessorResponse, error)
	GetPredecessor(context.Context, *EmptyRequest) (*NodeInfo, error)
	Notify(context.Context, *NodeInfo) (*EmptyResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	ReceiveFileInfo(context.Context, *FileChunkInfo) (*FileChunkResponse, error)
	mustEmbedUnimplementedChordNodeServer()
}

// UnimplementedChordNodeServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChordNodeServer struct{}

func (UnimplementedChordNodeServer) FindSuccessor(context.Context, *FindSuccessorRequest) (*FindSuccessorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSuccessor not implemented")
}
func (UnimplementedChordNodeServer) GetPredecessor(context.Context, *EmptyRequest) (*NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPredecessor not implemented")
}
func (UnimplementedChordNodeServer) Notify(context.Context, *NodeInfo) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedChordNodeServer) Put(context.Context, *PutRequest) (*PutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedChordNodeServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedChordNodeServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedChordNodeServer) ReceiveFileInfo(context.Context, *FileChunkInfo) (*FileChunkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveFileInfo not implemented")
}
func (UnimplementedChordNodeServer) mustEmbedUnimplementedChordNodeServer() {}
func (UnimplementedChordNodeServer) testEmbeddedByValue()                   {}

// UnsafeChordNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChordNodeServer will
// result in compilation errors.
type UnsafeChordNodeServer interface {
	mustEmbedUnimplementedChordNodeServer()
}

func RegisterChordNodeServer(s grpc.ServiceRegistrar, srv ChordNodeServer) {
	// If the following call pancis, it indicates UnimplementedChordNodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChordNode_ServiceDesc, srv)
}

func _ChordNode_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSuccessorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordNode_FindSuccessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).FindSuccessor(ctx, req.(*FindSuccessorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordNode_GetPredecessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).GetPredecessor(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordNode_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).Notify(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordNode_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordNode_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordNode_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChordNode_ReceiveFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileChunkInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordNodeServer).ReceiveFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChordNode_ReceiveFileInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordNodeServer).ReceiveFileInfo(ctx, req.(*FileChunkInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// ChordNode_ServiceDesc is the grpc.ServiceDesc for ChordNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChordNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chord.ChordNode",
	HandlerType: (*ChordNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindSuccessor",
			Handler:    _ChordNode_FindSuccessor_Handler,
		},
		{
			MethodName: "GetPredecessor",
			Handler:    _ChordNode_GetPredecessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _ChordNode_Notify_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ChordNode_Put_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ChordNode_Get_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _ChordNode_Join_Handler,
		},
		{
			MethodName: "ReceiveFileInfo",
			Handler:    _ChordNode_ReceiveFileInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node/chord.proto",
}
